//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Neo.ApplicationFramework.Generated {
    using Neo.ApplicationFramework.Controls.Controls;
    using Neo.ApplicationFramework.Controls;
    using Neo.ApplicationFramework.Interfaces;
    using Neo.ApplicationFramework.Tools.Security;
    using Neo.ApplicationFramework.Tools.Actions;
    using Neo.ApplicationFramework.Common.MultiLanguage;
    
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class CalInstruction : CalBack {
        
        private Neo.ApplicationFramework.Controls.Controls.Button m_Button;
        
        private Neo.ApplicationFramework.Controls.Controls.Button m_Button1;
        
        private Neo.ApplicationFramework.Controls.Controls.Label m_lblFlowCalibration;
        
        private Neo.ApplicationFramework.Controls.Controls.Label m_lblFlowAdjust;
        
        private Neo.ApplicationFramework.Controls.Controls.Label m_lblPressCalibration;
        
        private Neo.ApplicationFramework.Controls.Controls.Label m_lblPressAdjust;
        
        private Neo.ApplicationFramework.Controls.Controls.SliderCF m_Slider;
        
        private bool m_Initialized_CalInstruction;
        
        public CalInstruction() {
            this.InitializeComponent();
            this.Button.Click += new System.EventHandler(this.Button_Click);
            this.Button1.Click += new System.EventHandler(this.Button1_Click);
            this.Adapter.Opened += new System.EventHandler(this.CalInstruction_Opened);
            this.Opened += new System.EventHandler(this.CalInstruction_Action_Opened);
            this.m_Button.Click += new System.EventHandler(this.m_Button_Action_Click);
            this.m_Button1.Click += new System.EventHandler(this.m_Button1_Action_Click);
            this.ApplyLanguageInitialize();
        }
        
        protected Neo.ApplicationFramework.Controls.Script.ButtonCFAdapter Button {
            get {
                return this.AdapterService.CreateAdapter<Neo.ApplicationFramework.Controls.Script.ButtonCFAdapter>(this.m_Button);
            }
        }
        
        protected Neo.ApplicationFramework.Controls.Script.ButtonCFAdapter Button1 {
            get {
                return this.AdapterService.CreateAdapter<Neo.ApplicationFramework.Controls.Script.ButtonCFAdapter>(this.m_Button1);
            }
        }
        
        protected Neo.ApplicationFramework.Controls.Script.TextControlCFAdapter lblFlowCalibration {
            get {
                return this.AdapterService.CreateAdapter<Neo.ApplicationFramework.Controls.Script.TextControlCFAdapter>(this.m_lblFlowCalibration);
            }
        }
        
        protected Neo.ApplicationFramework.Controls.Script.TextControlCFAdapter lblFlowAdjust {
            get {
                return this.AdapterService.CreateAdapter<Neo.ApplicationFramework.Controls.Script.TextControlCFAdapter>(this.m_lblFlowAdjust);
            }
        }
        
        protected Neo.ApplicationFramework.Controls.Script.TextControlCFAdapter lblPressCalibration {
            get {
                return this.AdapterService.CreateAdapter<Neo.ApplicationFramework.Controls.Script.TextControlCFAdapter>(this.m_lblPressCalibration);
            }
        }
        
        protected Neo.ApplicationFramework.Controls.Script.TextControlCFAdapter lblPressAdjust {
            get {
                return this.AdapterService.CreateAdapter<Neo.ApplicationFramework.Controls.Script.TextControlCFAdapter>(this.m_lblPressAdjust);
            }
        }
        
        protected Neo.ApplicationFramework.Controls.Script.LinearMeterBaseCFAdapter Slider {
            get {
                return this.AdapterService.CreateAdapter<Neo.ApplicationFramework.Controls.Script.LinearMeterBaseCFAdapter>(this.m_Slider);
            }
        }
        
        private void InitializeComponent() {
            Neo.ApplicationFramework.Common.Dynamics.SymbolIntervalMapper symbolintervalmapper1 = new Neo.ApplicationFramework.Common.Dynamics.SymbolIntervalMapper();
            Neo.ApplicationFramework.Common.Dynamics.SymbolIntervalMapper symbolintervalmapper2 = new Neo.ApplicationFramework.Common.Dynamics.SymbolIntervalMapper();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalMapperCF stringintervalmappercf1 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalMapperCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf1 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf2 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalMapperCF stringintervalmappercf2 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalMapperCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf3 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf4 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf5 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalMapperCF stringintervalmappercf3 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalMapperCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf6 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf7 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalMapperCF stringintervalmappercf4 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalMapperCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf8 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf9 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF stringintervalcf10 = new Neo.ApplicationFramework.Common.Dynamics.StringIntervalCF();
            this.m_Button = new Neo.ApplicationFramework.Controls.Controls.Button();
            this.m_Button1 = new Neo.ApplicationFramework.Controls.Controls.Button();
            this.m_lblFlowCalibration = new Neo.ApplicationFramework.Controls.Controls.Label();
            this.m_lblFlowAdjust = new Neo.ApplicationFramework.Controls.Controls.Label();
            this.m_lblPressCalibration = new Neo.ApplicationFramework.Controls.Controls.Label();
            this.m_lblPressAdjust = new Neo.ApplicationFramework.Controls.Controls.Label();
            this.m_Slider = new Neo.ApplicationFramework.Controls.Controls.SliderCF();
            ((System.ComponentModel.ISupportInitialize)(this.m_Button)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_Button1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_lblFlowCalibration)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_lblFlowAdjust)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_lblPressCalibration)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_lblPressAdjust)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_Slider)).BeginInit();
            this.SuspendLayout();
            // 
            // CalInstruction
            // 
            this.BorderStyle = Neo.ApplicationFramework.Interfaces.ScreenBorderStyle.ThreeDBorder;
            this.ControlBox = false;
            // 
            // m_Button
            // 
            this.m_Button.Background = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(91)))), ((int)(((byte)(146)))), ((int)(((byte)(214))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_Button.BlinkDynamicsValue = false;
            this.m_Button.BorderBrush = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_Button.BorderThickness = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(2D, 2D, 2D, 2D);
            this.m_Button.EnabledDynamicsValue = true;
            this.m_Button.FontSizePixels = 23;
            this.m_Button.ForceTransparency = true;
            this.m_Button.Height = 58;
            this.m_Button.IndicatorMargin = null;
            this.m_Button.Left = 218;
            this.m_Button.Name = "m_Button";
            this.m_Button.RequiresTransparency = true;
            this.m_Button.ScreenOwnerName = "CalInstruction";
            this.m_Button.StyleName = "Glossy";
            this.m_Button.SymbolIntervalMapper = symbolintervalmapper1;
            this.m_Button.TextHeight = 28;
            this.m_Button.TextValue = 0D;
            this.m_Button.TextWidth = 234;
            this.m_Button.Top = 72;
            this.m_Button.Value = 0D;
            this.m_Button.VisibleDynamicsValue = true;
            this.m_Button.VisualPropertiesHashCode = -641995100;
            this.m_Button.Width = 240;
            // 
            // m_Button1
            // 
            this.m_Button1.Background = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(91)))), ((int)(((byte)(146)))), ((int)(((byte)(214))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_Button1.BlinkDynamicsValue = false;
            this.m_Button1.BorderBrush = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_Button1.BorderThickness = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(2D, 2D, 2D, 2D);
            this.m_Button1.EnabledDynamicsValue = true;
            this.m_Button1.FontSizePixels = 23;
            this.m_Button1.ForceTransparency = true;
            this.m_Button1.Height = 58;
            this.m_Button1.IndicatorMargin = null;
            this.m_Button1.Left = 471;
            this.m_Button1.Name = "m_Button1";
            this.m_Button1.RequiresTransparency = true;
            this.m_Button1.ScreenOwnerName = "CalInstruction";
            this.m_Button1.StyleName = "Glossy";
            this.m_Button1.SymbolIntervalMapper = symbolintervalmapper2;
            this.m_Button1.TextHeight = 28;
            this.m_Button1.TextValue = 0D;
            this.m_Button1.TextWidth = 225;
            this.m_Button1.Top = 72;
            this.m_Button1.Value = 0D;
            this.m_Button1.VisibleDynamicsValue = true;
            this.m_Button1.VisualPropertiesHashCode = -212819491;
            this.m_Button1.Width = 231;
            // 
            // m_lblFlowCalibration
            // 
            this.m_lblFlowCalibration.AutoSize = false;
            this.m_lblFlowCalibration.Background = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_lblFlowCalibration.BlinkDynamicsValue = false;
            this.m_lblFlowCalibration.Bold = true;
            this.m_lblFlowCalibration.BorderBrush = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_lblFlowCalibration.BorderThickness = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(2D, 2D, 2D, 2D);
            this.m_lblFlowCalibration.EnabledDynamicsValue = true;
            this.m_lblFlowCalibration.FontSizePixels = 23;
            this.m_lblFlowCalibration.Height = 326;
            this.m_lblFlowCalibration.Left = 218;
            this.m_lblFlowCalibration.MultiLine = true;
            this.m_lblFlowCalibration.Name = "m_lblFlowCalibration";
            this.m_lblFlowCalibration.ScreenOwnerName = "CalInstruction";
            stringintervalmappercf1.DefaultValue = "";
            stringintervalcf1.End = 100D;
            stringintervalcf1.Start = 51D;
            stringintervalcf1.Value = "   Flow Meter Calibration Overview\n\nStep 1: Zero the meter at no flow condition.\n" +
                "\nStep 2: Test meter accuracy at 25%FS. If required, adjust the meter.\n\nStep 3: T" +
                "est meter accuracy at 100%FS. If required, adjust the meter.";
            stringintervalcf2.End = 50D;
            stringintervalcf2.Value = @"Step 2: Test meter accuracy at 25%FS. If required, adjust the meter.

Step 3: Test meter accuracy at 100%FS. If required, adjust the meter.

Step 4: Test the meter at 50% FS and 75% FS for acceptable accuracy.If acceptable, meter is calibrated. If not acceptable, repeat from Step 1.";
            stringintervalmappercf1.Intervals.Add(stringintervalcf1);
            stringintervalmappercf1.Intervals.Add(stringintervalcf2);
            this.m_lblFlowCalibration.TextIntervalMapper = stringintervalmappercf1;
            this.m_lblFlowCalibration.Top = 134;
            this.m_lblFlowCalibration.VisibleDynamicsValue = true;
            this.m_lblFlowCalibration.Width = 486;
            this.m_lblFlowCalibration.WordWrap = true;
            // 
            // m_lblFlowAdjust
            // 
            this.m_lblFlowAdjust.AutoSize = false;
            this.m_lblFlowAdjust.Background = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_lblFlowAdjust.BlinkDynamicsValue = false;
            this.m_lblFlowAdjust.Bold = true;
            this.m_lblFlowAdjust.BorderBrush = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_lblFlowAdjust.BorderThickness = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(2D, 2D, 2D, 2D);
            this.m_lblFlowAdjust.EnabledDynamicsValue = true;
            this.m_lblFlowAdjust.FontSizePixels = 23;
            this.m_lblFlowAdjust.Height = 326;
            this.m_lblFlowAdjust.Left = 218;
            this.m_lblFlowAdjust.MultiLine = true;
            this.m_lblFlowAdjust.Name = "m_lblFlowAdjust";
            this.m_lblFlowAdjust.ScreenOwnerName = "CalInstruction";
            stringintervalmappercf2.DefaultValue = "";
            stringintervalcf3.End = 100D;
            stringintervalcf3.Start = 67D;
            stringintervalcf3.Value = @"     Flow Meter Adjustment

When meter is reading 25%FS, press the Set Span button to read 25%. Press up and down buttons to match the reading from the standard. The adjustment is complete when the meter and standard reading match within the accuracy of the meter.

When meter is reading 100%FS, press the Set Span button to read 100%. Press up and down buttons to match the reading from the standard. The adjustment is complete when the meter and standard reading match within the accuracy of the meter.";
            stringintervalcf4.End = 66D;
            stringintervalcf4.Start = 34D;
            stringintervalcf4.Value = @"
When meter is reading 100%FS, press the Set Span button to read 100%. Press up and down buttons to match the reading from the standard. The adjustment is complete when the meter and standard reading match within the accuracy of the meter.

Note: When adjusting the meter, keep the up/down button pressed for a longer time to change the meter reading faster.";
            stringintervalcf5.End = 33D;
            stringintervalcf5.Value = "Note: When adjusting the meter, keep the up/down button pressed for a longer time" +
                " to change the meter reading faster.";
            stringintervalmappercf2.Intervals.Add(stringintervalcf3);
            stringintervalmappercf2.Intervals.Add(stringintervalcf4);
            stringintervalmappercf2.Intervals.Add(stringintervalcf5);
            this.m_lblFlowAdjust.TextIntervalMapper = stringintervalmappercf2;
            this.m_lblFlowAdjust.Top = 134;
            this.m_lblFlowAdjust.VisibleDynamicsValue = true;
            this.m_lblFlowAdjust.Width = 486;
            this.m_lblFlowAdjust.WordWrap = true;
            // 
            // m_lblPressCalibration
            // 
            this.m_lblPressCalibration.AutoSize = false;
            this.m_lblPressCalibration.Background = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_lblPressCalibration.BlinkDynamicsValue = false;
            this.m_lblPressCalibration.Bold = true;
            this.m_lblPressCalibration.BorderBrush = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_lblPressCalibration.BorderThickness = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(2D, 2D, 2D, 2D);
            this.m_lblPressCalibration.EnabledDynamicsValue = true;
            this.m_lblPressCalibration.FontSizePixels = 23;
            this.m_lblPressCalibration.Height = 326;
            this.m_lblPressCalibration.Left = 218;
            this.m_lblPressCalibration.MultiLine = true;
            this.m_lblPressCalibration.Name = "m_lblPressCalibration";
            this.m_lblPressCalibration.ScreenOwnerName = "CalInstruction";
            stringintervalmappercf3.DefaultValue = "";
            stringintervalcf6.End = 100D;
            stringintervalcf6.Start = 51D;
            stringintervalcf6.Value = @"     Test Pressure Calibration Overview

Step1: To adjust the zero of the meter to match the standard, vent the 1401 by opening the valve V4. If the reading is not within specifications, zero the meter by pressing the Zero button. Adjust the offset only if necessary.

Step2: Test the pressure meter's reading at 100%FS. If required adjust the span to match the reading from the standard.";
            stringintervalcf7.End = 50D;
            stringintervalcf7.Value = @"Step2: Test the pressure meter's reading at 100%FS. If required adjust the span to match the reading from the standard.

Step 3: Test the meter at 50%FS and 75%FS for acceptable accuracy. If acceptable, meter is calibrated. If not acceptable, repeat from Step 1.";
            stringintervalmappercf3.Intervals.Add(stringintervalcf6);
            stringintervalmappercf3.Intervals.Add(stringintervalcf7);
            this.m_lblPressCalibration.TextIntervalMapper = stringintervalmappercf3;
            this.m_lblPressCalibration.Top = 134;
            this.m_lblPressCalibration.VisibleDynamicsValue = true;
            this.m_lblPressCalibration.Width = 486;
            this.m_lblPressCalibration.WordWrap = true;
            // 
            // m_lblPressAdjust
            // 
            this.m_lblPressAdjust.AutoSize = false;
            this.m_lblPressAdjust.Background = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_lblPressAdjust.BlinkDynamicsValue = false;
            this.m_lblPressAdjust.Bold = true;
            this.m_lblPressAdjust.BorderBrush = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_lblPressAdjust.BorderThickness = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(2D, 2D, 2D, 2D);
            this.m_lblPressAdjust.EnabledDynamicsValue = true;
            this.m_lblPressAdjust.FontSizePixels = 23;
            this.m_lblPressAdjust.Height = 326;
            this.m_lblPressAdjust.Left = 218;
            this.m_lblPressAdjust.MultiLine = true;
            this.m_lblPressAdjust.Name = "m_lblPressAdjust";
            this.m_lblPressAdjust.ScreenOwnerName = "CalInstruction";
            stringintervalmappercf4.DefaultValue = "";
            stringintervalcf8.End = 100D;
            stringintervalcf8.Start = 67D;
            stringintervalcf8.Value = @"   Test Pressure Adjustments

When adjusting the pressure meter's offset/span, first select offset/span using the toggle button.

Using the up/down arrows or the calculator icon, adjust the constant values to match the meter reading to the standard.

The adjustment is complete when the meter and the standard readings match within the accuracy of the meter.";
            stringintervalcf9.End = 66D;
            stringintervalcf9.Start = 34D;
            stringintervalcf9.Value = @"Using the up/down arrows or the calculator icon, adjust the constant values to match the meter reading to the standard.

The adjustment is complete when the meter and the standard readings match within the accuracy of the meter.

Note: When adjusting the meter, keep the up/down button pressed for a longer time to change the reading faster.";
            stringintervalcf10.End = 33D;
            stringintervalcf10.Value = "The adjustment is complete when the meter and the standard readings match within " +
                "the accuracy of the meter.\r\n\r\nNote: When adjusting the meter, keep the up/down b" +
                "utton pressed for a longer time to change the reading faster.";
            stringintervalmappercf4.Intervals.Add(stringintervalcf8);
            stringintervalmappercf4.Intervals.Add(stringintervalcf9);
            stringintervalmappercf4.Intervals.Add(stringintervalcf10);
            this.m_lblPressAdjust.TextIntervalMapper = stringintervalmappercf4;
            this.m_lblPressAdjust.Top = 134;
            this.m_lblPressAdjust.VisibleDynamicsValue = true;
            this.m_lblPressAdjust.Width = 486;
            this.m_lblPressAdjust.WordWrap = true;
            // 
            // m_Slider
            // 
            this.m_Slider.Background = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(187)))), ((int)(((byte)(187)))), ((int)(((byte)(187))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_Slider.BlinkDynamicsValue = false;
            this.m_Slider.EnabledDynamicsValue = true;
            this.m_Slider.Focus = false;
            this.m_Slider.FontSizePixels = 12;
            this.m_Slider.ForceTransparency = false;
            this.m_Slider.Foreground = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_Slider.Height = 326;
            this.m_Slider.IndicatorColor = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(0)))), ((int)(((byte)(0))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_Slider.IndicatorMargin = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(6D, 14D, 6D, 13D);
            this.m_Slider.InvalidateAtValueChanged = true;
            this.m_Slider.Left = 710;
            this.m_Slider.MajorScaleMarginFirst = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(0D, 0D, 78D, 326D);
            this.m_Slider.MajorScaleMarginSecond = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(double.NaN, double.NaN, double.NaN, double.NaN);
            this.m_Slider.MajorTickCount = 11;
            this.m_Slider.Maximum = 100D;
            this.m_Slider.Minimum = 0D;
            this.m_Slider.MinorScaleMarginFirst = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(0D, 0D, 78D, 326D);
            this.m_Slider.MinorScaleMarginSecond = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(double.NaN, double.NaN, double.NaN, double.NaN);
            this.m_Slider.MinorTickCount = 1;
            this.m_Slider.Name = "m_Slider";
            this.m_Slider.Orientation = Neo.ApplicationFramework.Controls.Controls.OrientationCF.Vertical;
            this.m_Slider.RequiresTransparency = true;
            this.m_Slider.ScaleColor = new Neo.ApplicationFramework.Common.Graphics.Logic.BrushCF(System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0))))), System.Drawing.Color.Empty, Neo.ApplicationFramework.Interfaces.FillDirection.None);
            this.m_Slider.ScaleVisible = false;
            this.m_Slider.ScreenOwnerName = "CalInstruction";
            this.m_Slider.TextScaleMargin = new Neo.ApplicationFramework.Common.Graphics.Logic.ThicknessCF(0D, 0D, 78D, 326D);
            this.m_Slider.Top = 134;
            this.m_Slider.VisibleDynamicsValue = true;
            this.m_Slider.Width = 78;
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
            this.ClientSize = new System.Drawing.Size(800, 480);
            this.IsCacheable = true;
            this.Location = new System.Drawing.Point(0, 0);
            this.ModalScreen = true;
            this.Name = "CalInstruction";
            this.PopupScreen = false;
            this.ScreenID = null;
            this.ScreenTitle = "";
            this.StyleName = "";
            this.WindowState = System.Windows.Forms.FormWindowState.Normal;
            this.m_Initialized_CalInstruction = true;
            this.AddControlsAndPrimitives();
            this.ResumeLayout(false);
        }
        
        protected override Neo.ApplicationFramework.Common.Alias.Entities.AliasInstancesCF CreateInstanceData() {
            System.Collections.Generic.List<Neo.ApplicationFramework.Common.Alias.Entities.AliasInstanceCF> instanceList = new System.Collections.Generic.List<Neo.ApplicationFramework.Common.Alias.Entities.AliasInstanceCF>(1);
            instanceList.Add(this.CreateInstanceData_Default());
            Neo.ApplicationFramework.Common.Alias.Entities.AliasInstancesCF aliasInstances = new Neo.ApplicationFramework.Common.Alias.Entities.AliasInstancesCF();
            aliasInstances.Instances = instanceList.ToArray();
            return aliasInstances;
        }
        
        private Neo.ApplicationFramework.Common.Alias.Entities.AliasInstanceCF CreateInstanceData_Default() {
            Neo.ApplicationFramework.Common.Alias.Entities.AliasInstanceCF aliasinstancecf1 = new Neo.ApplicationFramework.Common.Alias.Entities.AliasInstanceCF();
            aliasinstancecf1.Name = "Default";
            aliasinstancecf1.Values = new Neo.ApplicationFramework.Common.Alias.Entities.AliasValueCF[0];
            return aliasinstancecf1;
        }
        
        protected override void BindAliases() {
        }
        
        protected override void Dispose(bool disposing) {
            base.Dispose(disposing);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override void AddControlsAndPrimitives() {
            if (!m_Initialized_CalInstruction) {
                return;
            }
            this.AddControls();
            this.AddDrawingPrimitives();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override void AddControls() {
            base.AddControls();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override void AddDrawingPrimitives() {
            base.AddDrawingPrimitives();
            this.DrawingPrimitives.Add(this.m_Button);
            this.DrawingPrimitives.Add(this.m_Button1);
            this.DrawingPrimitives.Add(this.m_lblFlowCalibration);
            this.DrawingPrimitives.Add(this.m_lblFlowAdjust);
            this.DrawingPrimitives.Add(this.m_lblPressCalibration);
            this.DrawingPrimitives.Add(this.m_lblPressAdjust);
            this.DrawingPrimitives.Add(this.m_Slider);
            ((System.ComponentModel.ISupportInitialize)(this.m_Button)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_Button1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_lblFlowCalibration)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_lblFlowAdjust)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_lblPressCalibration)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_lblPressAdjust)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.m_Slider)).EndInit();
        }
        
        private void CalInstruction_Action_Opened(object sender, System.EventArgs e) {
            Neo.ApplicationFramework.Generated.Globals.AuditTrailService.LogAction("CalInstruction", "Opened", "Set Analog", "Tags.CurrentScreen", "");
            Neo.ApplicationFramework.Generated.Globals.Tags.CurrentScreen.SetAnalog(4);
        }
        
        private void m_Button_Action_Click(object sender, System.EventArgs e) {
            Neo.ApplicationFramework.Generated.Globals.AuditTrailService.LogAction("m_Button", "Click", "Execute Script", "Buzzer", "");
            Neo.ApplicationFramework.Generated.Globals.Buzzer.Buzz();
        }
        
        private void m_Button1_Action_Click(object sender, System.EventArgs e) {
            Neo.ApplicationFramework.Generated.Globals.AuditTrailService.LogAction("m_Button1", "Click", "Execute Script", "Buzzer", "");
            Neo.ApplicationFramework.Generated.Globals.Buzzer.Buzz();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        private void ApplyLanguageInternal() {
            Neo.ApplicationFramework.Tools.MultiLanguage.MultiLanguageResourceManager resources = new Neo.ApplicationFramework.Tools.MultiLanguage.MultiLanguageResourceManager(typeof(CalInstruction));
            this.m_Button.Text = resources.GetText("CalInstruction.Button.Text", "Calibration");
            this.m_Button1.Text = resources.GetText("CalInstruction.Button1.Text", "Adjustment");
            resources.ApplyTexts(this.m_lblFlowAdjust, "Texts", "CalInstruction.lblFlowAdjust.Texts[0]", @"     Flow Meter Adjustment

When meter is reading 25%FS, press the Set Span button to read 25%. Press up and down buttons to match the reading from the standard. The adjustment is complete when the meter and standard reading match within the accuracy of the meter.

When meter is reading 100%FS, press the Set Span button to read 100%. Press up and down buttons to match the reading from the standard. The adjustment is complete when the meter and standard reading match within the accuracy of the meter.", "CalInstruction.lblFlowAdjust.Texts[1]", @"
When meter is reading 100%FS, press the Set Span button to read 100%. Press up and down buttons to match the reading from the standard. The adjustment is complete when the meter and standard reading match within the accuracy of the meter.

Note: When adjusting the meter, keep the up/down button pressed for a longer time to change the meter reading faster.", "CalInstruction.lblFlowAdjust.Texts[2]", "Note: When adjusting the meter, keep the up/down button pressed for a longer time" +
                    " to change the meter reading faster.");
            resources.ApplyTexts(this.m_lblFlowCalibration, "Texts", "CalInstruction.lblFlowCalibration.Texts[0]", "   Flow Meter Calibration Overview\n\nStep 1: Zero the meter at no flow condition.\n" +
                    "\nStep 2: Test meter accuracy at 25%FS. If required, adjust the meter.\n\nStep 3: T" +
                    "est meter accuracy at 100%FS. If required, adjust the meter.", "CalInstruction.lblFlowCalibration.Texts[1]", @"Step 2: Test meter accuracy at 25%FS. If required, adjust the meter.

Step 3: Test meter accuracy at 100%FS. If required, adjust the meter.

Step 4: Test the meter at 50% FS and 75% FS for acceptable accuracy.If acceptable, meter is calibrated. If not acceptable, repeat from Step 1.");
            resources.ApplyTexts(this.m_lblPressAdjust, "Texts", "CalInstruction.lblPressAdjust.Texts[0]", @"   Test Pressure Adjustments

When adjusting the pressure meter's offset/span, first select offset/span using the toggle button.

Using the up/down arrows or the calculator icon, adjust the constant values to match the meter reading to the standard.

The adjustment is complete when the meter and the standard readings match within the accuracy of the meter.", "CalInstruction.lblPressAdjust.Texts[1]", @"Using the up/down arrows or the calculator icon, adjust the constant values to match the meter reading to the standard.

The adjustment is complete when the meter and the standard readings match within the accuracy of the meter.

Note: When adjusting the meter, keep the up/down button pressed for a longer time to change the reading faster.", "CalInstruction.lblPressAdjust.Texts[2]", "The adjustment is complete when the meter and the standard readings match within " +
                    "the accuracy of the meter.\r\n\r\nNote: When adjusting the meter, keep the up/down b" +
                    "utton pressed for a longer time to change the reading faster.");
            resources.ApplyTexts(this.m_lblPressCalibration, "Texts", "CalInstruction.lblPressCalibration.Texts[0]", @"     Test Pressure Calibration Overview

Step1: To adjust the zero of the meter to match the standard, vent the 1401 by opening the valve V4. If the reading is not within specifications, zero the meter by pressing the Zero button. Adjust the offset only if necessary.

Step2: Test the pressure meter's reading at 100%FS. If required adjust the span to match the reading from the standard.", "CalInstruction.lblPressCalibration.Texts[1]", @"Step2: Test the pressure meter's reading at 100%FS. If required adjust the span to match the reading from the standard.

Step 3: Test the meter at 50%FS and 75%FS for acceptable accuracy. If acceptable, meter is calibrated. If not acceptable, repeat from Step 1.");
            this.ApplyResourcesOnForm();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        protected override void ApplyLanguage() {
            if (((Neo.ApplicationFramework.Interfaces.IScreen)(this)).IsCachedDeactivated) {
                return;
            }
            this.ApplyLanguageInternal();
            base.ApplyLanguage();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override void ApplyLanguageInitialize() {
            if (!m_Initialized_CalInstruction) {
                return;
            }
            base.ApplyLanguageInitialize();
            this.ApplyLanguageInternal();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override void ConnectDataBindings() {
            base.ConnectDataBindings();
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding1 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("Value", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.calInstPrg"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.Never, Neo.ApplicationFramework.Common.Dynamics.VariantValueConverterCF.Default);
            this.m_lblPressAdjust.DataBindings.Add(dynamicBinding1);
            this.m_DynamicBindings.Add(dynamicBinding1);
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding2 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("VisibleDynamicsValue", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.InstDisp"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.Never, new Neo.ApplicationFramework.Common.Dynamics.BoolDynamicsConverterCF("", 2));
            this.m_lblPressCalibration.DataBindings.Add(dynamicBinding2);
            this.m_DynamicBindings.Add(dynamicBinding2);
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding3 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("Value", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.calInstPrg"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged, Neo.ApplicationFramework.Common.Dynamics.VariantValueConverterCF.Default);
            this.m_Slider.DataBindings.Add(dynamicBinding3);
            this.m_DynamicBindings.Add(dynamicBinding3);
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding4 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("VisibleDynamicsValue", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.InstDisp"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.Never, new Neo.ApplicationFramework.Common.Dynamics.BoolDynamicsConverterCF("", 3));
            this.m_lblPressAdjust.DataBindings.Add(dynamicBinding4);
            this.m_DynamicBindings.Add(dynamicBinding4);
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding5 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("Value", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.calInstPrg"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.Never, Neo.ApplicationFramework.Common.Dynamics.VariantValueConverterCF.Default);
            this.m_lblPressCalibration.DataBindings.Add(dynamicBinding5);
            this.m_DynamicBindings.Add(dynamicBinding5);
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding6 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("VisibleDynamicsValue", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.InstDisp"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.Never, Neo.ApplicationFramework.Common.Dynamics.BoolDynamicsConverterCF.TrueValueZero);
            this.m_lblFlowCalibration.DataBindings.Add(dynamicBinding6);
            this.m_DynamicBindings.Add(dynamicBinding6);
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding7 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("Value", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.calInstPrg"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.Never, Neo.ApplicationFramework.Common.Dynamics.VariantValueConverterCF.Default);
            this.m_lblFlowCalibration.DataBindings.Add(dynamicBinding7);
            this.m_DynamicBindings.Add(dynamicBinding7);
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding8 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("VisibleDynamicsValue", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.InstDisp"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.Never, Neo.ApplicationFramework.Common.Dynamics.BoolDynamicsConverterCF.TrueValueOne);
            this.m_lblFlowAdjust.DataBindings.Add(dynamicBinding8);
            this.m_DynamicBindings.Add(dynamicBinding8);
            Neo.ApplicationFramework.Common.Data.DynamicBinding dynamicBinding9 = new Neo.ApplicationFramework.Common.Data.DynamicBinding("Value", Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy("Tags.calInstPrg"), "Value", true, System.Windows.Forms.DataSourceUpdateMode.Never, Neo.ApplicationFramework.Common.Dynamics.VariantValueConverterCF.Default);
            this.m_lblFlowAdjust.DataBindings.Add(dynamicBinding9);
            this.m_DynamicBindings.Add(dynamicBinding9);
        }
    }
}
